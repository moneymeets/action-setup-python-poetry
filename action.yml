name: "Install Python and Poetry"
author: "Marcel Arns"
description: "Set up a specific version of Poetry with specific version of Python and install dependencies"
inputs:
  poetry_version:
    description: "Poetry version to install"
    required: false
  python_version:
    description: "Python version to use"
    required: false
  ssh_key:
    description: "SSH key to use to clone private repositories"
    required: false
  working_directory:
    description: "Working directory, defaults to GITHUB_WORKSPACE"
    required: false
    default: ${{ github.workspace }}
  with_checks:
    description: "Perform checks during Python setup"
    required: false
    default: "true"
  # ToDo: Remove disable cache option when https://github.com/actions/setup-python/issues/361 is fixed
  poetry_cache_enabled:
    description: "Caching of Poetry environment"
    default: "true"

outputs:
  python-version:
    description: "Python version"
    value: ${{ steps.setup-python.outputs.python-version }}
  poetry-version:
    description: "Poetry version"
    value: ${{ steps.detect-versions.outputs.poetry-version }}

runs:
  using: "composite"
  steps:

    - uses: moneymeets/moneymeets-composite-actions/block-poetry-version-downgrade@master
      if: ${{ inputs.with_checks == 'true' }}

    - name: Detect Python and Poetry versions for repository
      uses: moneymeets/moneymeets-composite-actions/detect-python-version@master
      id: detect-versions
      with:
        poetry_version: ${{ inputs.poetry_version }}
        python_version: ${{ inputs.python_version }}
        working_directory: ${{ inputs.working_directory }}

    - name: Detect Python and Poetry versions for action
      uses: moneymeets/moneymeets-composite-actions/detect-python-version@master
      id: detect-versions-action
      with:
        working_directory: ${{ github.action_path }}

    - name: Install and configure Poetry
      shell: bash
      run: pipx install poetry==${{ steps.detect-versions.outputs.poetry-version }}

    - name: Setup Python for action
      uses: actions/setup-python@v5
      id: setup-python-action
      with:
        python-version: '${{ steps.detect-versions-action.outputs.python-version-constraint }}'
        # ToDo: Enable when https://github.com/actions/setup-python/issues/361 is fixed
        # cache: 'poetry'
        # cache-dependency-path: ${{ format('{0}/poetry.lock', github.action_path) }}

    - name: Check for invalid package versions in pyproject.toml
      run: |
        poetry install
        poetry run invalid_package_versions ${{ inputs.working_directory }}/pyproject.toml
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Setup Python for repository
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: '${{ steps.detect-versions.outputs.python-version-constraint }}'
        # ToDo: Remove conditional expressions below when https://github.com/actions/setup-python/issues/361 is fixed
        cache: ${{ inputs.poetry_cache_enabled == 'true' && 'poetry' || ''}}
        cache-dependency-path: ${{ inputs.poetry_cache_enabled == 'true' && format('{0}/poetry.lock', inputs.working_directory) || ''}}

    - run: |
        if [ "$(echo ${{ steps.detect-versions.outputs.poetry-version }} | cut -c1-4)" == "1.5." ]; then
            poetry lock --check
        else
            poetry check --lock
        fi
      shell: bash
      working-directory: ${{ inputs.working_directory }}

    - name: Create virtualenv and install dependencies
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        if [ ! -z "${{ inputs.ssh_key }}" ]; then
            eval "$(ssh-agent -s)"
            ssh-add - <<< "${{ inputs.ssh_key }}"
        fi

        poetry install
